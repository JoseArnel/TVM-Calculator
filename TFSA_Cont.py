import math

def TFSA():
    limit = [5000, 5000, 5000, 5000, 5500, 5500, 1000, 5500, 5500, 5500, 6000, 6000, 6000, 6000, 6500]
    year = [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]
    age = int(input("Age: ")) 
    if (age < 18):
        print("Too young to invest")
    if (age > len(limit) + 18):
        acc = sum(limit)
        print(f'${acc:,d}')
        return 0
    age = age - 18
    acc = 0 
    for i in range(int((len(limit)) - age - 1), len(limit)):
        acc += limit[i]
    print(f'${acc:,d}')

# Dates
# Students Loans
# RetireBy
def Milli():
    target = 1000000
    pv = int(input("Present Value($): "))
    i = float(input("Interest(%): "))/100
    pmt = int(input("Contributions($): ")) * -1

    count = 0
    for x in range(100):
        count += 1
        fv = FutureValue(pv, i, count, pmt)
        # print(fv)
        if (fv > target):
            print("It will take you " + str(count) + "yrs to make your first million.")
            print("Millionaire by the age of " + str(count+18))
            break

def FutureValue(pv, i, n, pmt):
    for x in range(1,n+1):
        p_i= pv * i
        fv = pv + p_i - pmt
        pv = fv
    # print("Future Value = ${:.2f}".format(fv))
    return(fv)
    
TFSA()






# def compunt_interest(principal, rate, time):
#         amount = principal * (pow((1 + rate / 100), time))
#         CI = Amount  - principal
#         print ("Compund inerest is"

# 6000.0
# 12420.0
# 19289.4
# 26639.658000000003
# 34504.43406
# 42919.7444442
# 51924.126555293995
# 61558.81541416457
# 71867.9324931561
# 82898.68776767702
# 94701.59591141442
# 107330.70762521343
# 120843.85715897837
# 135302.92716010686
# 150774.13206131433
# 167328.32130560634
# 185041.30379699878
# 203994.1950627887
# 224273.7887171839
# 245972.95392738678
# 269191.0607023039
# 294034.43495146517
# 320616.84539806773
# 349060.0245759325
# 379494.22629624774
# 412058.8221369851
# 446902.93968657404
# 484186.14546463423
# 524079.17564715864
# 566764.7179424597
# 612438.2481984319
# 661308.9255723222
# 713600.5503623848
# 769552.5888877517
# 829421.2701098943
# 893480.7590175869
# 962024.412148818
# 1035366.1209992353
# 38

# 59500.0
# 69665.0
# 80541.55
# 92179.45850000001
# 104632.02059500001
# 117956.26203665
# 132213.2003792155
# 147468.12440576058
# 163790.89311416383
# 181256.2556321553
# 199944.1935264062
# 219940.2870732546
# 241336.10716838244
# 264229.6346701692
# 288725.70909708104
# 314936.5087338767
# 342982.06434524804
# 372990.8088494154
# 405100.16546887445
# 439457.17705169565
# 476219.17944531434
# 515554.52200648637
# 557643.3385469404
# 602678.3722452262
# 650865.8583023921
# 702426.4683835595
# 757596.3211704086
# 816628.0636523373
# 879792.0281080009
# 947377.470075561
# 1019693.8929808503
# 31